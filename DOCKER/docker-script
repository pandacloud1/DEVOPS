#!/bin/bash
# Description: Docker management script with image/container operations, Dockerfile support, and DockerHub push

while true; do
  echo
  echo "#----------------------------"
  echo "PLEASE CHOOSE AN OPTION:"
  echo "#----------------------------"
  echo "1. Pull Docker image"
  echo "2. Build image from Dockerfile"
  echo "3. List Docker images"
  echo "4. Create container from Image"
  echo "5. List containers"
  echo "6. Go inside a container"
  echo "7. Push image to DockerHub"
  echo "8. Stop all containers"
  echo "9. Remove all containers"
  echo "10. Remove all unused images"
  echo "c. Clear the screen"
  echo "q. Quit"
  echo "#----------------------------"
  read -p "WHAT DO YOU WANT TO DO?: " input
  echo "#----------------------------"
  echo

  case "$input" in
    1)
      read -p "Enter image name (e.g., nginx): " image_name
      read -p "Enter image version (e.g., latest): " image_version
      full_image="${image_name}:${image_version}"
      echo "Pulling image: $full_image"
      docker pull "$full_image"
      echo
      ;;

    2)
      if [ ! -f Dockerfile ]; then
        echo "Dockerfile does not exist, please create one."
        break
      fi

      read -p "Enter image name to build from Dockerfile: " dockerfile_image
      docker build -t "$dockerfile_image" .
      echo "Success: Docker image '$dockerfile_image' created."
      ;;

    3)
      image_count=$(docker images -q | wc -l)
      if [ "$image_count" -eq 0 ]; then
        echo "Sorry, there are no images in your system."
      else
        echo "These are the images in your system:"
        docker images
      fi
      ;;

    4)
      read -p "Do you want to map ports? (y/n): " port_map
      if [ "$port_map" == "y" ]; then
        read -p "Enter host port: " host_port
        read -p "Enter container port: " container_port
        port_option="-p ${host_port}:${container_port}"
      elif [ "$port_map" == "n" ]; then
        port_option=""
      else
        echo "Invalid input. Please enter 'y' or 'n'."
        break
      fi

      read -p "Enter the image name to use: " image_name
      read -p "Give a name to the container: " container_name
      read -p "Run mode interactive or detached (i/d): " mode

      if [ "$mode" == "i" ]; then
        docker run -it --name "$container_name" $port_option "$image_name"
        echo "Success: Container '$container_name' created in interactive mode."
      elif [ "$mode" == "d" ]; then
        docker run -dt --name "$container_name" $port_option "$image_name"
        echo "Success: Container '$container_name' created in detached mode."
      else
        echo "Invalid mode. Please enter 'i' or 'd'."
      fi
      ;;

    5)
      container_count=$(docker ps -a -q | wc -l)
      if [ "$container_count" -eq 0 ]; then
        echo "Sorry, there are no containers in your system."
      else
        echo "These are all the containers:"
        docker ps -a
      fi
      ;;

    6)
      read -p "Enter container name to access: " container_name
      is_running=$(docker inspect -f '{{.State.Running}}' "$container_name" 2>/dev/null)

      if [ "$is_running" != "true" ]; then
        echo "Container '$container_name' is not running."
        read -p "Do you want to start it? (y/n): " start_choice
        if [ "$start_choice" == "y" ]; then
          docker start "$container_name"
          echo "Container '$container_name' started."
        else
          echo "Aborted entering container."
          break
        fi
      fi

      docker exec -it "$container_name" /bin/bash
      ;;

    7)
      read -p "Enter DockerHub username: " username
      echo "Logging in to DockerHub..."
      docker login -u "$username"

      read -p "Enter local image name to push (e.g., myapp): " local_image
      read -p "Enter version tag (e.g., v1.0): " version_tag

      remote_image="${username}/${local_image}:${version_tag}"
      echo "Tagging image as: $remote_image"
      docker tag "$local_image" "$remote_image"

      echo "Pushing image to DockerHub..."
      docker push "$remote_image"
      echo "Success: Image '$remote_image' pushed to DockerHub."
      ;;

    8)
      echo "Stopping all containers..."
      docker stop $(docker ps -aq) >/dev/null 2>&1
      echo "Success: All containers stopped."
      echo
      ;;

    9)
      echo "Removing all containers..."
      docker rm $(docker ps -aq) >/dev/null 2>&1
      echo "Success: All containers have been removed."
      echo
      ;;

    10)
      echo "Removing all unused images..."
      docker image prune -af
      echo "Success: Unused images removed."
      echo
      ;;

    c)
      echo "Clearing the screen..."
      clear
      ;;

    q)
      echo "Thank you!"
      break
      ;;

    *)
      echo "Invalid option. Please choose 1â€“10, c, or q to quit."
      ;;
  esac
done
